"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AppHttpConfig_1 = require("../config/AppHttpConfig");
var RestFactory_1 = require("../rest/RestFactory");
var AuthState_1 = require("../state/AuthState");
var core_1 = require("@angular/core");
var operators_1 = require("rxjs/operators");
var UserService = /** @class */ (function () {
    function UserService(authState, httpConfig, restFactory) {
        this._authState = authState;
        this._restWorker = restFactory.createRestWorker(httpConfig, "users");
    }
    UserService.prototype.addProfileAttribute = function (userId, attribute) {
        return this._restWorker.post(userId + "/profile", attribute).pipe(operators_1.map(function (body) {
            return body && body.data || null;
        }));
    };
    UserService.prototype.getProfile = function (userId) {
        return this._restWorker.get(userId + "/profile").pipe(operators_1.map(function (body) {
            return body && body.data || null;
        }));
    };
    UserService.prototype.register = function (user) {
        var _this = this;
        return this._restWorker.post("", user).pipe(operators_1.map(function (body) {
            _this._authState.persistAuth(body.user, body.token);
            return body.user;
        }));
    };
    UserService.prototype.removeProfileAttribute = function (userId, attributeId) {
        return this._restWorker.delete(userId + "/profile/" + attributeId).pipe(operators_1.map(function (body) {
            return body && body.data || false;
        }));
    };
    UserService.prototype.updateProfileAttribtue = function (userId, attribute) {
        return this._restWorker.put(userId + "/profile/" + attribute.id, attribute).pipe(operators_1.map(function (body) {
            return body && body.data || false;
        }));
    };
    UserService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [AuthState_1.AuthState,
            AppHttpConfig_1.AppHttpConfig,
            RestFactory_1.RestFactory])
    ], UserService);
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJVc2VyU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlEQUF3RDtBQUl4RCxtREFBa0Q7QUFFbEQsZ0RBQStDO0FBRS9DLHNDQUEyQztBQUUzQyw0Q0FBcUM7QUFHckM7SUFJSSxxQkFDSSxTQUFvQixFQUNwQixVQUF5QixFQUN6QixXQUF3QjtRQUV4QixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FDM0MsVUFBVSxFQUNWLE9BQU8sQ0FDVixDQUFDO0lBQ04sQ0FBQztJQUVNLHlDQUFtQixHQUExQixVQUEyQixNQUFjLEVBQUUsU0FBZ0M7UUFDdkUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBSSxNQUFNLGFBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQzdELGVBQUcsQ0FBQyxVQUFDLElBQVM7WUFDVixPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVNLGdDQUFVLEdBQWpCLFVBQWtCLE1BQWM7UUFDNUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBSSxNQUFNLGFBQVUsQ0FBQyxDQUFDLElBQUksQ0FDakQsZUFBRyxDQUFDLFVBQUMsSUFBUztZQUNWLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBRU0sOEJBQVEsR0FBZixVQUFnQixJQUFXO1FBQTNCLGlCQU9DO1FBTkcsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUN2QyxlQUFHLENBQUMsVUFBQyxJQUEwQjtZQUMzQixLQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7SUFFTSw0Q0FBc0IsR0FBN0IsVUFBOEIsTUFBYyxFQUFFLFdBQW1CO1FBQzdELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUksTUFBTSxpQkFBWSxXQUFhLENBQUMsQ0FBQyxJQUFJLENBQ25FLGVBQUcsQ0FBQyxVQUFDLElBQVM7WUFDVixPQUFPLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVNLDRDQUFzQixHQUE3QixVQUE4QixNQUFjLEVBQUUsU0FBZ0M7UUFDMUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBSSxNQUFNLGlCQUFZLFNBQVMsQ0FBQyxFQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUM1RSxlQUFHLENBQUMsVUFBQyxJQUFTO1lBQ1YsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7SUF2RFEsV0FBVztRQUR2QixpQkFBVSxFQUFFO3lDQU1NLHFCQUFTO1lBQ1IsNkJBQWE7WUFDWix5QkFBVztPQVBuQixXQUFXLENBd0R2QjtJQUFELGtCQUFDO0NBQUEsQUF4REQsSUF3REM7QUF4RFksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBIdHRwQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZy9BcHBIdHRwQ29uZmlnXCI7XHJcbmltcG9ydCB7IElVc2VyIH0gZnJvbSBcIi4uL21vZGVscy9pbnRlcmZhY2VzL0lVc2VyXCI7XHJcbmltcG9ydCB7IElVc2VyUHJvZmlsZUF0dHJpYnV0ZSB9IGZyb20gXCIuLi9tb2RlbHMvaW50ZXJmYWNlcy9JVXNlclByb2ZpbGVBdHRyaWJ1dGVcIjtcclxuaW1wb3J0IHsgTG9naW5SZXNwb25zZSB9IGZyb20gXCIuLi9tb2RlbHMvcmVzcG9uc2VNb2RlbHMvTG9naW5SZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBSZXN0RmFjdG9yeSB9IGZyb20gXCIuLi9yZXN0L1Jlc3RGYWN0b3J5XCI7XHJcbmltcG9ydCB7IFJlc3RXb3JrZXIgfSBmcm9tIFwiLi4vcmVzdC9SZXN0V29ya2VyXCI7XHJcbmltcG9ydCB7IEF1dGhTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZS9BdXRoU3RhdGVcIjtcclxuaW1wb3J0IHsgSVVzZXJTZXJ2aWNlIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9JVXNlclNlcnZpY2VcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIGltcGxlbWVudHMgSVVzZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2F1dGhTdGF0ZTogQXV0aFN0YXRlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVzdFdvcmtlcjogUmVzdFdvcmtlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgYXV0aFN0YXRlOiBBdXRoU3RhdGUsXHJcbiAgICAgICAgaHR0cENvbmZpZzogQXBwSHR0cENvbmZpZyxcclxuICAgICAgICByZXN0RmFjdG9yeTogUmVzdEZhY3RvcnlcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX2F1dGhTdGF0ZSA9IGF1dGhTdGF0ZTtcclxuICAgICAgICB0aGlzLl9yZXN0V29ya2VyID0gcmVzdEZhY3RvcnkuY3JlYXRlUmVzdFdvcmtlcihcclxuICAgICAgICAgICAgaHR0cENvbmZpZyxcclxuICAgICAgICAgICAgXCJ1c2Vyc1wiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkUHJvZmlsZUF0dHJpYnV0ZSh1c2VySWQ6IG51bWJlciwgYXR0cmlidXRlOiBJVXNlclByb2ZpbGVBdHRyaWJ1dGUpOiBPYnNlcnZhYmxlPElVc2VyUHJvZmlsZUF0dHJpYnV0ZT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN0V29ya2VyLnBvc3QoYCR7dXNlcklkfS9wcm9maWxlYCwgYXR0cmlidXRlKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKGJvZHk6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkgJiYgYm9keS5kYXRhIHx8IG51bGw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UHJvZmlsZSh1c2VySWQ6IG51bWJlcik6IE9ic2VydmFibGU8SVVzZXJQcm9maWxlQXR0cmlidXRlW10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdFdvcmtlci5nZXQoYCR7dXNlcklkfS9wcm9maWxlYCkucGlwZShcclxuICAgICAgICAgICAgbWFwKChib2R5OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5ICYmIGJvZHkuZGF0YSB8fCBudWxsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZ2lzdGVyKHVzZXI6IElVc2VyKTogT2JzZXJ2YWJsZTxJVXNlcj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN0V29ya2VyLnBvc3QoXCJcIiwgdXNlcikucGlwZShcclxuICAgICAgICAgICAgbWFwKChib2R5OiBMb2dpblJlc3BvbnNlPElVc2VyPikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXV0aFN0YXRlLnBlcnNpc3RBdXRoKGJvZHkudXNlciwgYm9keS50b2tlbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS51c2VyO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZVByb2ZpbGVBdHRyaWJ1dGUodXNlcklkOiBudW1iZXIsIGF0dHJpYnV0ZUlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdFdvcmtlci5kZWxldGUoYCR7dXNlcklkfS9wcm9maWxlLyR7YXR0cmlidXRlSWR9YCkucGlwZShcclxuICAgICAgICAgICAgbWFwKChib2R5OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5ICYmIGJvZHkuZGF0YSB8fCBmYWxzZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVQcm9maWxlQXR0cmlidHVlKHVzZXJJZDogbnVtYmVyLCBhdHRyaWJ1dGU6IElVc2VyUHJvZmlsZUF0dHJpYnV0ZSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN0V29ya2VyLnB1dChgJHt1c2VySWR9L3Byb2ZpbGUvJHthdHRyaWJ1dGUuaWR9YCwgYXR0cmlidXRlKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKGJvZHk6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkgJiYgYm9keS5kYXRhIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl19